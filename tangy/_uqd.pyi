import cython
from ._tangy import TangyBufferStandard
from _typeshed import Incomplete
from cython.cimports.libc.stdlib import free as free, malloc as malloc
from numpy import float64, ndarray as ndarray, uint64, uint8

UQD_ERROR_FLAG: Incomplete

def error_from_bit_set(bit_set: int) -> list[int]: ...

class UQDLogic16:
    def __init__(self, device_id: int = 1, calibrate: bool = True, add_buffer: bool = False, buffer_size: int | None = 10000000) -> None: ...
    def is_open(self) -> bool: ...
    def __close__(self) -> None: ...
    def __exit__(self) -> None: ...
    def calibrate(self) -> None: ...
    @property
    def led_brightness(self) -> int: ...
    @led_brightness.setter
    def led_brightness(self, percent: int): ...
    @property
    def fpga_version(self) -> cython.int: ...
    @property
    def resolution(self) -> float: ...
    @property
    def number_of_channels(self) -> int: ...
    @property
    def input_threshold(self) -> list[float64]: ...
    @input_threshold.setter
    def input_threshold(self, value: tuple[int, float64]): ...
    @property
    def inversion(self) -> list[uint8]: ...
    @inversion.setter
    def inversion(self, channel: uint8): ...
    @property
    def input_delay(self) -> float64: ...
    @input_delay.setter
    def input_delay(self, value: tuple[int, float64]): ...
    @property
    def function_generator(self) -> tuple[int, int]: ...
    @function_generator.setter
    def function_generator(self, value: tuple[int, int]): ...
    @property
    def external_10MHz_reference(self) -> bool: ...
    @external_10MHz_reference.setter
    def external_10MHz_reference(self, value: bool): ...
    def start_timetags(self) -> None: ...
    def stop_timetags(self) -> None: ...
    def read_tags(self) -> tuple[int, list[uint8], list[uint64]]: ...
    @property
    def filter_min_count(self) -> int: ...
    @filter_min_count.setter
    def filter_min_count(self, count: int): ...
    @property
    def filter_max_time(self) -> cython.double: ...
    @filter_max_time.setter
    def filter_max_time(self, time: cython.double): ...
    @property
    def exclusion(self) -> list[uint8]: ...
    @exclusion.setter
    def exclusion(self, value: int): ...
    @property
    def level_gate(self) -> bool: ...
    @level_gate.setter
    def level_gate(self, value: bool): ...
    @property
    def time_gating(self) -> bool: ...
    @time_gating.setter
    def time_gating(self, value: bool): ...
    @property
    def time_gate_width(self) -> int: ...
    @time_gate_width.setter
    def time_gate_width(self, duration: int): ...
    def check_errors(self) -> dict: ...
    def buffer(self) -> TangyBufferStandard: ...
    def write_to_buffer(self) -> None: ...
